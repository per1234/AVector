{"name":"Avector","tagline":"Vector class for Arduino based on Processing's PVector library.","body":"#AVector\r\n\r\nVector class for **`Arduino`** based on **`Processing`**'s [PVector class](https://github.com/processing/processing/blob/44248a80d111b1710a4781739327afa18d3593fa/core/src/processing/core/PVector.java) by Dan Shiffman, Ben Fry and Casey Reas.\r\nMy inspiration for writing this is Dan Shiffman's awesome book [The Nature of Code](http://natureofcode.com), which he has graciously [posted on his website](http://natureofcode.com/book/) in its entirety. It's definitely worth buying a [print edition](http://www.amazon.com/gp/product/0985930802/ref=as_li_tf_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=0985930802&linkCode=as2&tag=natureofcode-20) though. You wont regret it!\r\n\r\n## Installation\r\n\r\n1. [Download](https://github.com/stuthedew/AVector/releases) the latest release from gitHub.\r\n2. Unzip and modify the Folder name to \"AVector\" (Remove the '-version')\r\n3. Paste the modified folder on your Library folder (On your `Libraries` folder inside Sketchbooks or Arduino software).\r\n\r\n## Getting started\r\n\r\n### `AVector` class\r\n\r\nA class that describes a 2D vector. This can be used to describe a vector like velocity or acceleration, or used to describe a position. \r\n\r\nThis class also includes common vector operations (addition/subtraction, rotation, dot product etc).\r\n\r\n#### To declare an AVector object:\r\n```c++\r\n//Simple AVector instance\r\nAVector myVector(x, y);\r\n\r\n//This will declare an AVector with x = 0 and y = 0:\r\nAVector myVector(); // == AVector myVector(0, 0)\r\n```\r\n\r\n#### Working with AVector components:\r\n```c++\r\n//Simple AVector instance\r\nAVector myVector(4, 5);\r\n\r\n//To access stored component values:\r\nmyVector.x(); // returns 4\r\nmyVector.y(); // returns 5\r\n\r\n//To change stored component values:\r\nmyVector.set(8, 10);\r\nmyVector.x(); // returns 8\r\nmyVector.y(); // returns 10\r\n\r\n// Also can be set from existing AVector object\r\nAVector newVector(9, 12);\r\n\r\nmyVector.set(&newVector);\r\nmyVector.x(); // returns 9\r\nmyVector.y(); // returns 12\r\n```\r\n\r\n--------------------------------\r\n\r\n##Libary Reference\r\n### `AVector` Class\r\n\r\n#####Initialize:\r\n- `AVector::AVector(int x = 0, int y = 0)` Initialize new AVector object\r\n\r\n#####Access Component Values:\r\n- `int` `AVector::x()` - return x component\r\n- `int` `AVector::y()` - return y component\r\n\r\n#####Set Component Values:\r\n- `AVector` `AVector::set(int x, int y)` - set x,y coordinates from integer values and return new AVector object\r\n- `AVector` `AVector::set(AVector *otherVector)` - set x,y coordinates from AVector object and return new AVector object\r\n\r\n#####Vector Operations:\r\n- `AVector` `AVector::add(int x, int y)` - add integer components to AVector object and return new AVector object\r\n- `AVector` `AVector::add(AVector *otherVector)` - add components of two AVector objects and return new AVector object\r\n- `AVector` `AVector::sub(int x, int y)` - subtract integer components from AVector object and return new AVector object\r\n- `AVector` `AVector::sub(AVector *otherVector)` - subtract components of two AVector objects and return new AVector object\r\n- `AVector` `AVector::mult(int scaler)` - multiply (or scale) vector by arbitrary integer value and return new AVector object\r\n- `AVector` `AVector::div(int scaler)` - divide (or scale) vector by arbitrary integer value and return new AVector object\r\n- `AVector` `AVector::setMag(float newMagnitude)` - set component values from vector magnitude (hypotenuse) and return new AVector object\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}